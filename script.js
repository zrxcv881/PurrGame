
// Variables
let userCards = [];
let tokens = 0;
let miningActive = false;
let miningEndTime = 0;
let marketListings = []; // –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
let selectedCardIndex = null; // –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
let currentPurchaseIndex = null; // –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏

// DOM Elements
const tokenDisplay = document.getElementById('token-count');
const miningButton = document.getElementById('mining-button');
const miningText = document.getElementById('mining-text');
const miningTimer = document.getElementById('mining-timer');
const getCardButton = document.getElementById('get-card-button');
const marketListingsContainer = document.getElementById('market-listings-container');

// Function to switch sections
function showSection(sectionId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.content').forEach(div => {
        div.classList.remove('active');
        div.classList.add('hidden');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const selectedSection = document.getElementById(sectionId);
    selectedSection.classList.remove('hidden');
    selectedSection.classList.add('active');

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.navbar button').forEach(button => {
        button.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    const activeButton = document.querySelector(`.navbar button[onclick="showSection('${sectionId}')"]`);
    if (activeButton) {
        activeButton.classList.add('active');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
    if (sectionId === 'exchange') {
        updateCardsToSell();
        updateMarketListings();
    }
}

// Function to get a welcome card
function getWelcomeCard() {
    const welcomeCard = { type: "welcome", content: "üéâ", owner: "user" }; // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    userCards.push(welcomeCard); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –º–∞—Å—Å–∏–≤
    updateCardsList(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    showModal();
}

// Function to update the cards list
function updateCardsList() {
    const cardsContainer = document.getElementById('cards-container');
    cardsContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

    userCards.forEach((card, index) => {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.textContent = card.content; // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        cardsContainer.appendChild(cardElement);
    });
}

// Function to show the modal
function showModal() {
    const modal = document.getElementById('card-modal');
    modal.classList.remove('hidden');
}

// Function to close the modal
function closeModal() {
    const modal = document.getElementById('card-modal');
    modal.classList.add('hidden');
}

// Function to show the "Not Enough Purr" modal
function showPurrModal() {
    const modal = document.getElementById('purr-modal');
    modal.classList.remove('hidden');
}

// Function to close the "Not Enough Purr" modal
function closePurrModal() {
    const modal = document.getElementById('purr-modal');
    modal.classList.add('hidden');
}

// Function to start mining
function startMining() {
    if (!miningActive) {
        miningActive = true;
        miningEndTime = Date.now() + 10 * 1000; // 10 seconds
        miningButton.classList.add('disabled');
        miningText.textContent = "Mining...";
        miningTimer.classList.remove('hidden');
        miningButton.onclick = null;

        const timer = setInterval(() => {
            const timeLeft = miningEndTime - Date.now();
            if (timeLeft <= 0) {
                clearInterval(timer);
                miningText.textContent = "Claim";
                miningTimer.classList.add('hidden');
                miningTimer.textContent = ""; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞
                miningButton.classList.remove('disabled');
                miningButton.onclick = claimTokens;

                // Add the token amount text
                const tokenAmount = document.createElement('span');
                tokenAmount.id = 'token-amount';
                tokenAmount.textContent = "+120 Purr";
                miningButton.appendChild(tokenAmount);
            } else {
                const seconds = Math.floor(timeLeft / 1000);
                miningTimer.textContent = `${seconds}s`;
            }
        }, 1000);
    }
}

// Function to claim tokens
function claimTokens() {
    if (miningActive && Date.now() >= miningEndTime) {
        miningActive = false;
        miningText.textContent = "Mining";
        miningButton.onclick = startMining;

        // Remove the token amount text
        const tokenAmount = document.getElementById('token-amount');
        if (tokenAmount) {
            tokenAmount.remove();
        }

        animateTokenIncrement(120); // Add 120 Purr
    }
}

// Function to animate token increment
function animateTokenIncrement(amount) {
    const targetTokens = tokens + amount;
    const incrementDuration = 1000; // 1 second
    const startTime = Date.now();

    const animation = setInterval(() => {
        const elapsedTime = Date.now() - startTime;
        if (elapsedTime >= incrementDuration) {
            tokens = targetTokens;
            tokenDisplay.textContent = tokens.toString();
            clearInterval(animation);
        } else {
            const progress = elapsedTime / incrementDuration;
            const currentTokens = Math.floor(tokens + amount * progress);
            tokenDisplay.textContent = currentTokens.toString();
        }
    }, 16); // Update every 16ms (~60 FPS)
}

// Function to buy a box
function buyBox(cost) {
    if (tokens >= cost) {
        tokens -= cost; // –°–Ω–∏–º–∞–µ–º Purr
        tokenDisplay.textContent = tokens.toString(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Purr

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const randomCard = getRandomCard();
        userCards.push(randomCard);
        updateCardsList(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
        showModalWithCard(randomCard.content);
    } else {
        showPurrModal(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Purr"
    }
}

// Function to buy a box with Telegram Stars (–∑–∞–≥–ª—É—à–∫–∞)
function buyBoxWithStars(stars) {
    alert(`This feature is not implemented yet. You need ${stars} Telegram Stars to buy this box.`);
}

// Function to get a random card
function getRandomCard() {
    const cards = ["üÉè", "üåü", "‚ö°", "üî•", "üíé", "üçÄ", "üê±", "üêæ", "‚ú®"]; // –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const randomIndex = Math.floor(Math.random() * cards.length);
    return { type: "random", content: cards[randomIndex], owner: "user" }; // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
}

// Function to show the modal with a specific card
function showModalWithCard(cardContent) {
    const modalCard = document.querySelector(".card-modal-card");
    modalCard.textContent = cardContent; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏

    const modal = document.getElementById('card-modal');
    modal.classList.remove('hidden');
}

// Function to update the cards list in the sell modal
function updateCardsToSell() {
    const cardsToSellContainer = document.getElementById('cards-to-sell');
    cardsToSellContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    userCards.forEach((card, index) => {
        const cardElement = document.createElement('div');
        cardElement.className = 'card-to-sell';
        cardElement.textContent = card.content; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        const isOnSale = marketListings.some(listing => listing.card === card && listing.owner === "user");

        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
        if (isOnSale) {
            cardElement.classList.add('on-sale');
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        cardElement.addEventListener('click', () => {
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            document.querySelectorAll('.card-to-sell').forEach(card => {
                card.classList.remove('selected');
            });

            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            cardElement.classList.add('selected');
            selectedCardIndex = index; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
            const cancelButton = document.getElementById('cancel-sale-button');
            if (isOnSale) {
                cancelButton.classList.remove('hidden');
            } else {
                cancelButton.classList.add('hidden');
            }
        });

        cardsToSellContainer.appendChild(cardElement);
    });
}

// Function to sell a card
function sellCard() {
    if (selectedCardIndex === null) {
        showNotification("Error", "Please select a card to sell.");
        return;
    }

    const price = parseInt(document.getElementById('card-price').value); // –¶–µ–Ω–∞
    if (isNaN(price) || price < 1) {
        showNotification("Error", "Please enter a valid price.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const cardToSell = userCards[selectedCardIndex];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ —Ä—ã–Ω–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    marketListings.push({ card: cardToSell, price: price, owner: "user" }); // –í–ª–∞–¥–µ–ª–µ—Ü - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    updateMarketListings(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Ä—ã–Ω–∫–µ
    updateCardsList(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    showNotification("Success", "Card listed for sale!");
    closeSellCardModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}
// Function to cancel the sale of a card
function cancelSale() {
    if (selectedCardIndex === null) {
        showNotification("Error", "Please select a card to cancel the sale.");
        return;
    }

    const selectedCard = userCards[selectedCardIndex];

    // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const listingIndex = marketListings.findIndex(listing => listing.card === selectedCard && listing.owner === "user");

    if (listingIndex === -1) {
        showNotification("Error", "This card is not listed for sale.");
        return;
    }

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–∞–∂
    marketListings.splice(listingIndex, 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateMarketListings(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Ä—ã–Ω–∫–µ
    updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    showNotification("Success", "Sale canceled successfully!");

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    const cancelButton = document.getElementById('cancel-sale-button');
    cancelButton.classList.add('hidden');
}

// Function to update the market listings
function updateMarketListings() {
    marketListingsContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    marketListings.forEach((listing, index) => {
        const listingElement = document.createElement('div');
        listingElement.className = 'market-listing';

        listingElement.innerHTML = `
            <div class="card-content">${listing.card.content}</div>
            <div class="card-price">${listing.price} Purr</div>
            <button onclick="openPurchaseConfirmModal(${index})">Buy</button>
        `;

        marketListingsContainer.appendChild(listingElement);
    });
}

// Function to open the purchase confirmation modal
function openPurchaseConfirmModal(index) {
    const purchaseModal = document.getElementById('purchase-confirm-modal');
    const confirmPrice = document.getElementById('confirm-price');
    const confirmCard = document.querySelector('.confirm-card');

    const listing = marketListings[index];
    confirmPrice.textContent = listing.price;
    confirmCard.textContent = listing.card.content;

    currentPurchaseIndex = index;
    purchaseModal.classList.remove('hidden');
}

// Function to confirm the purchase
function confirmPurchase() {
    if (currentPurchaseIndex !== null) {
        buyMarketCard(currentPurchaseIndex);
        closePurchaseConfirmModal();
    }
}

// Function to close the purchase confirmation modal
function closePurchaseConfirmModal() {
    const purchaseModal = document.getElementById('purchase-confirm-modal');
    purchaseModal.classList.add('hidden');
    currentPurchaseIndex = null;
}

// Function to buy a card from the market
function buyMarketCard(index) {
    const listing = marketListings[index]; // –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    if (tokens < listing.price) {
        showNotification("Error", "Not enough Purr to buy this card.");
        return;
    }

    tokens -= listing.price; // –°–Ω–∏–º–∞–µ–º Purr —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    tokenDisplay.textContent = tokens.toString(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Purr

    // –ù–∞—á–∏—Å–ª—è–µ–º Purr –ø—Ä–æ–¥–∞–≤—Ü—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (listing.owner === "user") {
        tokens += listing.price; // –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        tokenDisplay.textContent = tokens.toString();
    } else {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è Purr –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.log(`Purr transferred to ${listing.owner}`);
    }

    userCards.push(listing.card); // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    marketListings.splice(index, 1); // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä—ã–Ω–∫–∞

    updateMarketListings(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Ä—ã–Ω–∫–µ
    updateCardsList(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showNotification("Success", "Card purchased successfully!");
}

// Function to show notifications
function showNotification(title, message) {
    const notificationModal = document.getElementById('notification-modal');
    const notificationTitle = document.getElementById('notification-title');
    const notificationMessage = document.getElementById('notification-message');

    notificationTitle.textContent = title;
    notificationMessage.textContent = message;
    notificationModal.classList.remove('hidden');
}

// Function to close the notification modal
function closeNotificationModal() {
    const notificationModal = document.getElementById('notification-modal');
    notificationModal.classList.add('hidden');
}

// Initialize the app
showSection('home'); // Show the home section by default
updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
// Function to open the sell card modal
function openSellCardModal() {
    selectedCardIndex = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    updateCardsToSell(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
    const modal = document.getElementById('sell-card-modal');
    modal.classList.remove('hidden');
}

// Function to close the sell card modal
function closeSellCardModal() {
    const modal = document.getElementById('sell-card-modal');
    modal.classList.add('hidden');
}
